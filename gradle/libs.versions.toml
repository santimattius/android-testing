[versions]
# Define the dependency versions
kotlin = "1.7.10"
compose = "1.3.1"
activityCompose = "1.6.1"
coreKtx = "1.9.0"
coreTesting = "2.1.0"
legacySupport = "1.0.0"
appCompat = "1.4.1"
fragmentKtx = "1.4.1"
fragmentTesting = "1.4.1"
constraintLayout = "2.1.3"
recyclerView = "1.2.1"
materialVersion = "1.5.0"
room = "2.5.0"
coil = "2.1.0"

junit = "4.13.2"
junitExt = "1.1.4"
espressoCore = "3.5.0"
lifecycle = "2.6.0-alpha01"
lifecycleExtensions = "2.2.0"
retrofit = "2.9.0"
okHttp = "4.9.3"
coroutine = "1.6.4"
gson = "2.10"
okhttp3IdlingResource = "1.0.0"
glide = "4.12.0"
mockk = "1.12.3"
robolectric = "4.6"

[libraries]
# Define the libraries
kotlin_stdlib = { module = "org.jetbrains.kotlin:kotlin-stdlib", version.ref = "kotlin" }
# Android
core_ktx = { module = "androidx.core:core-ktx", version.ref = "coreKtx" }
core_testing = { module = "androidx.arch.core:core-testing", version.ref = "coreTesting" }
# UI
legacy_support = { module = "androidx.legacy:legacy-support-v4", version.ref = "legacySupport" }
app_compart = { module = "androidx.appcompat:appcompat", version.ref = "appCompat" }
fragment_ktx = { module = "androidx.fragment:fragment-ktx", version.ref = "fragmentKtx" }
constraint_layout = { module = "androidx.constraintlayout:constraintlayout", version.ref = "constraintLayout" }
recycler_view = { module = "androidx.recyclerview:recyclerview", version.ref = "recyclerView" }
material = { module = "com.google.android.material:material", version.ref = "materialVersion" }
fragment_testing = { module = "androidx.fragment:fragment-testing", version.ref = "fragmentTesting" }
# Lifecycle
lifecycle_extensions = { module = "androidx.lifecycle:lifecycle-extensions", version.ref = "lifecycleExtensions" }
lifecycle_runtime_ktx = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "lifecycle" }
lifecycle_viewmodel_ktx = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "lifecycle" }
lifecycle_livedata_ktx = { module = "androidx.lifecycle:lifecycle-livedata-ktx", version.ref = "lifecycle" }
# Retrofit
retrofit_core = { module = "com.squareup.retrofit2:retrofit", version.ref = "retrofit" }
retrofit_gson = { module = "com.squareup.retrofit2:converter-gson", version.ref = "retrofit" }
logging_interceptor = { module = "com.squareup.okhttp3:logging-interceptor", version.ref = "okHttp" }
# Moshi
gson_core = { module = "com.google.code.gson:gson", version.ref = "gson" }
#ImageLoader
glide_core = { module = "com.github.bumptech.glide:glide", version.ref = "glide" }
# Coroutines
coroutine_core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutine" }
coroutine_android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "coroutine" }
coroutine_test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutine" }
# Room
room_ktx = { module = "androidx.room:room-ktx", version.ref = "room" }
room_runtime = { module = "androidx.room:room-runtime", version.ref = "room" }
room_compiler = { module = "androidx.room:room-compiler", version.ref = "room" }
# Test
junit = { module = "junit:junit", version.ref = "junit" }
mockwebserver = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "okHttp" }
mockk_core = { module = "io.mockk:mockk", version.ref = "mockk" }
mockk_android = { module = "io.mockk:mockk-android", version.ref = "mockk" }
robolectric_core = { module = "org.robolectric:robolectric", version.ref = "robolectric" }
robolectric_httpclient = { module = "org.robolectric:shadows-httpclient", version.ref = "robolectric" }
# AndroidTest
test_ext = { module = "androidx.test.ext:junit", version.ref = "junitExt" }
test_ext_ktx = { module = "androidx.test.ext:junit-ktx", version.ref = "junitExt" }
test_runner = { module = "androidx.test:runnert", version = "1.2.0" }
test_rule = { module = "androidx.test:rules", version = "1.2.0" }
test_espresso = { module = "androidx.test.espresso:espresso-core", version.ref = "espressoCore" }
test_espresso_contrib = { module = "androidx.test.espresso:espresso-contrib", version.ref = "espressoCore" }
okHttp3_idling_resource = { module = "com.jakewharton.espresso:okhttp3-idling-resource", version.ref = "okhttp3IdlingResource" }

[bundles]
# Define bundles/groups of libraries
ui = ["legacy.support", "app.compart", "fragment.ktx", "constraint.layout", "recycler.view", "material", "fragment.testing"]
lifecycle = ["lifecycle.extensions", "lifecycle.runtime.ktx", "lifecycle.viewmodel.ktx", "lifecycle.livedata.ktx"]
coroutine = ["coroutine.core", "coroutine.android"]
retrofit = ["retrofit.core", "retrofit.gson", "logging.interceptor"]
serializable = ["gson.core"]

unitTesting = ["core.testing", "mockwebserver", "coroutine.test", "junit", "mockk.core", "robolectric.core", "robolectric.httpclient", "test.ext.ktx"]
androidTesting = ["mockwebserver", "okHttp3.idling.resource", "mockk.android", "test.ext.ktx", "test.runner", "test.rule", "test.espresso.contrib"]

[plugins]
kotlin = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }