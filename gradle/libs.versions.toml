[versions]
# Plugins
androidGradlePlugin = "8.8.0"
hamcrest = "2.2"
kotlin = "2.1.10"
detektGradlePlugin = "1.23.7"
ksp = "2.1.10-1.0.29"
googleSecretsPlugin = "2.0.1"
automatticMeasureBuilds = "3.1.1"

# Define the dependency versions
coreKtx = "1.15.0"
legacySupport = "1.0.0"
appCompat = "1.7.0"
fragmentKtx = "1.8.5"
constraintLayout = "2.2.0"
recyclerView = "1.4.0"
materialVersion = "1.12.0"
lifecycle = "2.9.0-alpha09"

retrofit = "2.11.0"
okHttp = "4.12.0"

coroutine = "1.10.1"
gson = "2.11.0"
glide = "4.12.0"
coil = "2.7.0"
room = "2.6.1"

androidxComposeBom = "2025.01.01"
activityCompose = "1.10.0"

koinBom = "4.1.0-Beta5"
koinAnnotations = "2.0.0-RC1"

#Testing
junit = "4.13.2"
junitExt = "1.2.1"
testRunner = "1.6.2"
testRule = "1.6.1"
coreKtxVersion = "1.6.1"
coreTesting = "2.2.0"
fragmentTesting = "1.8.5"
espressoCore = "3.6.1"
okhttp3IdlingResource = "1.0.0"

mockk = "1.12.3"
robolectric = "4.12.2"
turbine = "0.12.3"
mockitoKotlin = "5.4.0"

[libraries]
# Define the libraries
kotlin-stdlib = { module = "org.jetbrains.kotlin:kotlin-stdlib", version.ref = "kotlin" }
# Android
core-ktx = { module = "androidx.core:core-ktx", version.ref = "coreKtx" }
core-testing = { module = "androidx.arch.core:core-testing", version.ref = "coreTesting" }
# UI
legacy-support = { module = "androidx.legacy:legacy-support-v4", version.ref = "legacySupport" }
app-compart = { module = "androidx.appcompat:appcompat", version.ref = "appCompat" }
fragment-ktx = { module = "androidx.fragment:fragment-ktx", version.ref = "fragmentKtx" }
constraint-layout = { module = "androidx.constraintlayout:constraintlayout", version.ref = "constraintLayout" }
recycler-view = { module = "androidx.recyclerview:recyclerview", version.ref = "recyclerView" }
material = { module = "com.google.android.material:material", version.ref = "materialVersion" }

# Compose libraries
compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "androidxComposeBom" }
compose_ui = { group = "androidx.compose.ui", name = "ui" }
compose_tooling_preview = { group = "androidx.compose.ui", name = "ui-tooling-preview" }
compose_tooling = { group = "androidx.compose.ui", name = "ui-tooling" }
compose_ui_test_manifest = { group = "androidx.compose.ui", name = "ui-test-manifest" }
compose_material3 = { group = "androidx.compose.material3", name = "material3" }
compose_icons = { group = "androidx.compose.material", name = "material-icons-extended" }
compose_ui_test_junit = { group = "androidx.compose.ui", name = "ui-test-junit4" }
activity-compose = { module = "androidx.activity:activity-compose", version.ref = "activityCompose" }
# Lifecycle
lifecycle-runtime-ktx = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "lifecycle" }
lifecycle-viewmodel-ktx = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "lifecycle" }
lifecycle-livedata-ktx = { module = "androidx.lifecycle:lifecycle-livedata-ktx", version.ref = "lifecycle" }
lifecycle_viewmodel_testing = { module = "androidx.lifecycle:lifecycle-viewmodel-testing", version.ref = "lifecycle" }
# Retrofit
retrofit-core = { module = "com.squareup.retrofit2:retrofit", version.ref = "retrofit" }
retrofit-gson = { module = "com.squareup.retrofit2:converter-gson", version.ref = "retrofit" }
logging-interceptor = { module = "com.squareup.okhttp3:logging-interceptor", version.ref = "okHttp" }
# Moshi
gson-core = { module = "com.google.code.gson:gson", version.ref = "gson" }
#ImageLoader
glide-core = { module = "com.github.bumptech.glide:glide", version.ref = "glide" }
coil-core = { module = "io.coil-kt:coil-compose", version.ref = "coil" }
# Coroutines
coroutine-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutine" }
coroutine-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "coroutine" }
coroutine-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutine" }
# Room
room-ktx = { module = "androidx.room:room-ktx", version.ref = "room" }
room-runtime = { module = "androidx.room:room-runtime", version.ref = "room" }
room-compiler = { module = "androidx.room:room-compiler", version.ref = "room" }

koin-bom = { module = "io.insert-koin:koin-bom", version.ref = "koinBom" }
koin-android = { group = "io.insert-koin", name = "koin-android" }
koin-androidx-compose = { group = "io.insert-koin", name = "koin-androidx-compose" }
koin-androidx-startup = { group = "io.insert-koin", name = "koin-androidx-startup" }
koin-annotations-core = { group = "io.insert-koin", name = "koin-annotations" , version.ref= "koinAnnotations" }
koin-annotations-compiler = { group = "io.insert-koin", name = "koin-ksp-compiler", version.ref= "koinAnnotations" }
koin-test-core = { group = "io.insert-koin", name = "koin-test"}
koin-test-junit4 = { group = "io.insert-koin", name = "koin-test-junit4"}
koin-android-test = { group = "io.insert-koin", name = "koin-android-test"}

# Test
junit = { module = "junit:junit", version.ref = "junit" }
mockwebserver = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "okHttp" }
mockk-core = { module = "io.mockk:mockk", version.ref = "mockk" }
mockk-android = { module = "io.mockk:mockk-android", version.ref = "mockk" }
mockito-kotlin = { module = "org.mockito.kotlin:mockito-kotlin", version.ref = "mockitoKotlin" }
robolectric-core = { module = "org.robolectric:robolectric", version.ref = "robolectric" }
robolectric-httpclient = { module = "org.robolectric:shadows-httpclient", version.ref = "robolectric" }
androidx-core-ktx = { module = "androidx.test:core-ktx", version.ref = "coreKtxVersion" }
androidx-fragment-testing-manifest = { module = "androidx.fragment:fragment-testing-manifest", version.ref = "fragmentTesting" }
androidx-fragment-testing = { module = "androidx.fragment:fragment-testing", version.ref = "fragmentTesting" }

# AndroidTest
test-ext = { module = "androidx.test.ext:junit", version.ref = "junitExt" }
test-ext-ktx = { module = "androidx.test.ext:junit-ktx", version.ref = "junitExt" }
test-runner = { module = "androidx.test:runner", version.ref = "testRunner" }
test-rule = { module = "androidx.test:rules", version.ref = "testRule" }
test-espresso = { module = "androidx.test.espresso:espresso-core", version.ref = "espressoCore" }
test-espresso-contrib = { module = "androidx.test.espresso:espresso-contrib", version.ref = "espressoCore" }
okHttp3-idling-resource = { module = "com.jakewharton.espresso:okhttp3-idling-resource", version.ref = "okhttp3IdlingResource" }

turbine = { module = "app.cash.turbine:turbine", version.ref = "turbine" }
hamcrest = { module = "org.hamcrest:hamcrest", version.ref = "hamcrest" }
##Plugins
dep-google-secrets-gradle-plugin = { module = "com.google.android.libraries.mapsplatform.secrets-gradle-plugin:secrets-gradle-plugin", version.ref = "googleSecretsPlugin" }

[bundles]
# Define bundles/groups of libraries
ui = ["legacy-support", "app-compart", "fragment-ktx", "constraint-layout", "recycler-view", "material"]
compose = ["compose_ui", "compose_material3", "compose_tooling_preview", "compose_icons"]
compose_debug = ["compose_tooling", "compose_ui_test_manifest"]
lifecycle = [ "lifecycle-runtime-ktx", "lifecycle-viewmodel-ktx", "lifecycle-livedata-ktx"]
coroutine = ["coroutine-core", "coroutine-android"]
retrofit = ["retrofit-core", "retrofit-gson", "logging-interceptor"]
serializable = ["gson-core"]

robolectric = ["robolectric-core", "robolectric-httpclient"]
unitTesting = ["core-testing", "mockwebserver", "coroutine-test", "junit", "mockk-core", "test-ext-ktx"]
androidTesting = ["core-testing", "mockwebserver", "okHttp3-idling-resource", "junit", "mockk-android", "test-ext-ktx", "test-runner", "test-rule", "test-espresso", "test-espresso-contrib"]

[plugins]
android-application = { id = "com.android.application", version.ref = "androidGradlePlugin" }
android-library = { id = "com.android.library", version.ref = "androidGradlePlugin" }
kotlin = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
room = { id = "androidx.room", version.ref = "room"}
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
compose-compiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detektGradlePlugin" }
google-secrets-gradle-plugin = { id = "com.google.android.libraries.mapsplatform.secrets-gradle-plugin", version.ref = "googleSecretsPlugin" }
automattic-measure-builds = { id = "com.automattic.android.measure-builds", version.ref = "automatticMeasureBuilds" }
